
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique 
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?   
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bio           String?
  experience    Int?     

  skills        String[]  
  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
  
  careerPaths   CareerPath[]
  networkConnections NetworkConnection[]
  careerGoals   CareerGoal[]
  practiceSessions PracticeSession[]
  skillAnalyses SkillGapAnalysis[]
  mockInterviews MockInterview[]
  atsScores      ATSScore[]
  coldEmail     ColdEmail[]
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     
  questions     Json[]    
  category      String
  improvementTip String?  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique    
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text 
  
  // Template information
  templateId  String?   
  template    ResumeTemplate? @relation("TemplateResumes", fields: [templateId], references: [id])
  customCSS   String?   
  
  // Photo for templates that require it
  photoUrl    String?   @db.Text
  
  // Contact information stored as JSON
  contactInfo Json?
  
  // Resume sections stored as JSON
  summary     String?   @db.Text
  skills      String?   @db.Text
  experience  Json[]
  education   Json[]
  projects    Json[]
  
  atsScore    Float?
  feedback    String?
  
  // Tailored versions
  tailoredVersions ResumeVersion[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ResumeTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String   
  difficulty  String   
  style       String   
  
  // Template identifiers
  templateKey String   @unique // e.g., "modern-pro", "minimal-classic"
  
  // Template configuration
  requiresPhoto Boolean  @default(false)
  colorScheme   String   // primary color theme
  
  // HTML and CSS for web rendering
  htmlContent String   @db.Text
  cssStyles   String   @db.Text
  thumbnail   String   
  
  // Customization options
  colorSchemes Json[] 
  fontOptions  String[] 
  layoutVariations Json[] 
  
  // Template metadata
  description String?
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  successRate Float?   
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  resumes     Resume[] @relation("TemplateResumes")
  
  @@index([category, style])
  @@index([templateKey])
}

model ResumeVersion {
  id             String   @id @default(cuid())
  resumeId       String
  resume         Resume   @relation(fields: [resumeId], references: [id])
  
  jobTitle       String
  companyName    String
  jobDescription String?  @db.Text
  tailoredContent String  @db.Text
  atsScore       Float?
  matchPercentage Float? 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([resumeId])
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    
  jobDescription  String?
  companyName     String    
  jobTitle        String    
  status          String    @default("draft") 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

model CareerPath {
  id            String   @id @default(uuid())
  currentRole   String
  targetRole    String
  industry      String
  steps         Json     
  milestones    Json     
  resources     Json     
  timeline      Json     
  progress      Float    @default(0)
  currentStep   Int      @default(0)
  status        String   @default("active")
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SkillGapAnalysis {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  
  jobTitle          String
  jobDescription    String   @db.Text
  companyName       String?
  
  userSkills        String[]
  requiredSkills    String[]
  matchedSkills     String[]
  missingSkills     String[]
  
  matchPercentage   Float
  confidenceScore   Float
  
  learningPaths     Json[]
  prioritySkills    String[]
  timeToAcquire     Json[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
}

model MockInterview {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  jobRole         String
  interviewType   String
  difficulty      String
  
  questions       Json[]
  responses       Json[]
  
  overallScore    Float
  confidenceScore Float
  communicationScore Float
  technicalScore  Float?
  
  strengths       String[]
  improvements    String[]
  aiTips          String[]
  
  duration        Int
  completedAt     DateTime?
  status          String   @default("started")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, status])
}

model PracticeSession {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  type            String
  category        String?
  
  duration        Int
  performanceScore Float
  feedback        Json
  
  recording       String?
  transcript      String?
  
  emotionAnalysis Json?
  speechAnalysis  Json?
  
  createdAt       DateTime @default(now())
  
  @@index([userId, type])
}



model CareerGoal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  title       String
  description String
  category    String
  priority    String   @default("medium")
  
  targetDate  DateTime
  startDate   DateTime @default(now())
  
  status      String   @default("active")
  progress    Float    @default(0)
  
  milestones  Json[]
  actions     Json[]
  
  targetValue String?
  currentValue String?
  
  notes       String?
  lessons     String[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, status])
}

model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique

  users         User[]

  salaryRanges  Json[]

  growthRate    Float
  demandLevel   String
  topSkills     String[]

  marketOutlook String
  keyTrends     String[]

  recommendedSkills String[]

  jobAvailability Json[]
  hiringTrends   Json[]
  
  remoteWorkPercentage Float?
  hybridWorkTrends     Json[]

  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime

  @@index([industry])
}

model ATSScore {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  atsScore       Float
  matchPercentage Float?

  strengths      String[]
  weaknesses     String[]
  improvements   String[]

  relevantSkills String[]
  missingSkills  String[]
  recommendations Json[]

  finalSummary   String   @db.Text
  analyzedBy     String?

  jobTitle       String?
  companyName    String?
  jobDescription String?  @db.Text

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model ColdEmail {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    
  jobDescription  String?
  companyName     String    
  jobTitle        String    
  status          String    @default("draft") 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}   